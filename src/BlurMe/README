Options can be found in options.py 

Obuscation options include:
inference_target = 'job' # 'gender', 'age', or 'job'
average_or_predicted_ratings = 'average' # 'predicted' or 'average'
chosen_strategy = 'greedy' # 'sampled', 'random', or 'greedy'

Adjust as necessary. Once you have chosen your settings follow these next steps:
-----------------------------------------------------------------------------------------------------------

HOW TO USE
FIRST, run attribute_inference_NN.py to generate the Neural Networks. One neural network will be generated per TEST_PERCENTAGE (in options.py) since each neural network will be trained with a different percentage of the training data, chosen at random.

Information about the neural network:
    - Input is one-hot encoding
    - Hidden layer is 100 neurons
    - Last layer is softmax
    - Loss function is cross entropy Loss
    - Trained over 17 EPOCHS (set in options.py)

SECOND, run attribute_obfuscation.py. This will generate results in a results folder. 
    - (Accuracy of NN before obfuscation and after obfuscation with different levels of K Obfuscation where K is the number of movies to add to each user)

THIRD, run rating_predictor.py. This will generate more results in the same results folder. 
    - (Stats on Matrix Factorization recommender before and after obfuscation.)
    - latent_matrix_dimension can be set (default 128) for Matrix Factorization in options.py
    - By default it performs 100 iterations of training per matrix factorization recommender. This can be modified in options.py
    - RMSE, MAE, precision@k, recall@k, F1@k
    - NOTE: This is the longest process since it takes a long period of time to train the Matrix Factorization for each obfuscated test set, obfuscated at different levels
-----------------------------------------------------------------------------------------------------------

After performing these steps, you can change the inference target to another value and perform the same steps again.

-----------------------------------------------------------------------------------------------------------

HOW OBFUSCATION WORKS:
1. A list is generated for each attribute (e.g. Over age 45, Under age 35, Between age 45 and age 35). The intersection of all lists is the empty set.
2. The lists are sorted corresponding to a score in decreasing order
3. In the BlurMe paper, this 'score' is calculated using the weights/coefficients from their Logistic Regression Inference Attack
4. In this work, we follow Attrigaurd's NN Inference Attack approach. 
5. In order to calculate scores for the BlurMe approach, we input user vectors where each vector only contains 1 movie viewed with a rating of 5 (MAX)
6. With the softmax output of each vector input, we determine which class the vector belongs to.
    e.g. [5, 0 ,0 ,0] .. corresponds to movie #0 having a rating of 5
         The softmax output could be [0.95, 0.05], in which case if this corresponds to [Male, Female] it would be a Male movie with score 0.95
    - This should capture the same essence as the weight coefficients from the Logistic Inference Attack presented in BlurMe 
    - (Higher scores for movies more strongly tied to the respective class/attribute)
    
7. Once the movies have been sorted by score, we randomly choose a class/attribute that does not match the user. (If the user were male, we would look at the female list)
8. Once we have determined which class/attribute list to look at, we use a 'greedy' approach and select the k-highest scored movies in that class/attribute
9. This movie is then given the 'average' rating or 'predicted' rating (predicted rating is obtained from Matrix Factorization with training data)
10. Repeat until k movies have been selected and the user's class/attribute has been so-called 'obfusacated'

-----------------------------------------------------------------------------------------------------------

HOW TO READ RESULTS:
For the attributeX_inference_NN_XX.XXk_obfuscation.out files:

First row is test percentages
Second row is non_obfuscated_losses
Third row is obfuscated_losses
Fourth row is non_obfuscated_accuracies
Fifth row is obfuscated_accuracies
Sixth row is non_obfuscated_auc_micros
Seventh row is non_obfuscated_auc_macros
Eigth row is obfuscated_auc_micros
Ninth row is obfuscated_auc_macros

For the matrix_factorization_recommender_results_precisionXk.out files:
Data is to be read column-wise as:
['test_percentage', 'k (obfuscation percent)', 'mf2_mse', 'mf2_mae', 'mf2_avg_precision', 'mf2_avg_recall', 'mf2_avg_F1', 'mf2_auc_micro', 'mf2_auc_macro'])

-----------------------------------------------------------------------------------------------------------

DETAILS ON HOW THE NEURAL NETWORK AND MATRIX FACTORIZATION ARE TRAINED

First the dataset is split in two parts where one part doesn't contain the K (default K=10... can be changed in options.py) most recent movies and the other part does.
Let's call the part which doesnn't contain the K most recent reviews X1 and the part which does Y1.
X1 will be used to train the ORIGINAL (non-obfuscated) Matrix Factorization Recommenderand Y1 will be used to test the Matrix Factoriztion Recommender

After this split, we look at what kind of attribute we want to infer and what % users we want to split X1 for testing. 
Given 943 users in X1 with 5% testing, there will be 47 users in the test set. At 10% testing there will be 94 users in the test set. The remaining 100% - testing are added in the training set.
It should be noted that the data is shuffled before this user test% split.
With this user split in X1, we also use the corresponding user attribute labels as the expected output of the NN.
Let's call the the training set for the NN A1 and the testing set B1. 
Both A1 and B1 consist of (user ratings without 10 most recent ratings [input], expected user attribute [output]) pairs

Afterwards, A1 will be used to train the NN.
B1 will be used to test the NN.
B1 will be both non-obfuscated and obfuscated with each value in k_values (can be changed in options.py. By default it's 30, 35, 40, 45) and results will be stored in attributeX_inference_NN_XX.XXk_obfuscation.out. 

Afterwards we want to see the impact of obfuscation on the Matrix Factorzation Recommender
We still test on Y1, BUT we train on X1 with obfuscated ratings. 
These obfuscated ratings are either the 'average' movie rating or 'predicted' from the ORIGINAL (non-obfuscated) Matrix Factorization Recommender. More details in HOW OBFUSCATION WORKS section.
The results of each matrix factorization is stored in the reuslts folder with MF_{corresponding attribute} in a file matrix_factorization_recommender_results_precisionXk.out
In order to read this, refer to the HOW TO READ RESULTS section
-----------------------------------------------------------------------------------------------------------
