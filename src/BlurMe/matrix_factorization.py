import numpy as np
import options

# Code was taken from:
# http://www.albertauyeung.com/post/python-matrix-factorization/

class MF():

    def __init__(self, R, K, alpha, beta, iterations):
        """
        Perform matrix factorization to predict empty
        entries in a matrix.

        Arguments
        - R (ndarray)   : user-item rating matrix
        - K (int)       : number of latent dimensions
        - alpha (float) : learning rate
        - beta (float)  : regularization parameter
        """

        self.R = R
        self.num_users, self.num_items = R.shape
        self.K = K
        self.alpha = alpha
        self.beta = beta
        self.iterations = iterations

        # Initialize user and item latent feature matrice
        self.P = np.random.normal(scale=1./self.K, size=(self.num_users, self.K))
        self.Q = np.random.normal(scale=1./self.K, size=(self.num_items, self.K))

        # Initialize the biases
        self.b_u = np.zeros(self.num_users)
        self.b_i = np.zeros(self.num_items)
        self.b = np.mean(self.R[np.where(self.R != 0)])

    def train(self):
        # Create a list of training samples
        self.samples = [
            (i, j, self.R[i, j])
            for i in range(self.num_users)
            for j in range(self.num_items)
            if self.R[i, j] > 0
        ]

        # Perform stochastic gradient descent for number of iterations
        training_process = []
        for i in range(self.iterations):
            np.random.shuffle(self.samples)
            self.sgd()
            mse = self.mse(self.R)
            training_process.append((i, mse))
            if (i+1) % 5 == 0:
                print("Iteration: %d ; RMSE = %.4f" % (i+1, mse))

        return training_process

    def mse(self, comparison_matrix):
        """
        A function to compute the total mean square error
        """

        xs, ys = comparison_matrix.nonzero()
        predicted = self.full_matrix()
        error = 0
        for x, y in zip(xs, ys):
            error += pow(comparison_matrix[x, y] - predicted[x, y], 2)
        error /= len(xs)
        return np.sqrt(error)

    def mae(self, comparison_matrix):
        """
        A function to compute the total mean square error
        """

        xs, ys = comparison_matrix.nonzero()
        predicted = self.full_matrix()
        error = 0
        for x, y in zip(xs, ys):
            error += abs(comparison_matrix[x, y] - predicted[x, y])
        error /= len(xs)
        return error
    
    def precision_and_recall_at_k(self, comparison_matrix, k = 20):
        # Knowledge taken from:
        # https://medium.com/@m_n_malaeb/recall-and-precision-at-k-for-recommender-systems-618483226c54
        
        # Relevant items are already known in the data set
        # Relevant item: Has a True/Actual rating >= 3.5
        # Irrelevant item: Has a True/Actual rating < 3.5

        # # Recommended items are generated by recommendation algorithm
        # Recommended item: has a predicted rating >= 3.5
        # Not recommended item: Has a predicted rating < 3.5

        # Precision at k is the proportion of recommended items in the top-k set that are relevant

        user_precision_list = []
        user_recall_list = []
        relevant_set = set()
        recommended_set = set()
        predicted = self.full_matrix()

        for user in range(len(comparison_matrix)):

            # Filter out movies without true ratings
            movie_ratings_for_user = [(i,v) for i,v in enumerate(predicted[user]) if comparison_matrix[user][i] != 0]
            # Sort movies by ratings
            movie_ratings_for_user = sorted(movie_ratings_for_user, key=lambda x: x[1], reverse=True)  # Sort based on rating
            print("Predicted Movie Ratings (First 5): ", movie_ratings_for_user[:5])

            # Find k ratings whose PREDICTED rating is >= 3.5
            for i in range(min(k, len(movie_ratings_for_user))):
                if (movie_ratings_for_user[i][1] >= 3.5):
                    recommended_set.add(movie_ratings_for_user[i][0])
                else:
                    break
            
            # Filter out movies without true ratings
            true_movie_ratings_for_user = [(i,v) for i,v in enumerate(comparison_matrix[user]) if comparison_matrix[user][i] != 0]
       
            # Sort movies by ratings
            true_movie_ratings_for_user = sorted(true_movie_ratings_for_user, key=lambda x: x[1], reverse=True)  # Sort based on rating
            print("True Movie Ratings (First 5): ", true_movie_ratings_for_user[:5])

            # Find k ratings whose TRUE rating is >= 3.5   
            for i in range(len(true_movie_ratings_for_user)):
                if (true_movie_ratings_for_user[i][1] >= 3.5):
                    relevant_set.add(movie_ratings_for_user[i][0])
                else:
                    break

            # Find intersection
            both_set = relevant_set.intersection(recommended_set)

            if not len(recommended_set) == 0:
                precision = len(both_set)/(len(recommended_set))
            else:
                precision = 0
            recall = len(both_set)/len(relevant_set)

            user_precision_list.append(precision)
            user_recall_list.append(recall)
            print("User Precision: ", precision)
            print("User Recall: ", recall)
            print("-"*100)

        F1_list = [2 * (p * r) / (p + r) if p + r > 0 else 0 for p, r in zip(user_precision_list, user_recall_list) ]
        return (user_precision_list, user_recall_list, F1_list)

    def auc(self, comparison_matrix, test_percentage, k):
        ################
        # Taken from https://scikit-learn.org/stable/auto_examples/model_selection/plot_roc.html
        ################
        from sklearn.metrics import roc_curve, auc
        import matplotlib.pyplot as plt
        from scipy import interp
        from itertools import cycle

        y_score = self.full_matrix()
        y_test = comparison_matrix
        n_classes = y_score.shape[1]

        # Compute ROC curve and ROC area for each class
        fpr = dict()
        tpr = dict()
        roc_auc = dict()
        for i in range(n_classes):
            fpr[i], tpr[i], _ = roc_curve(y_test[:, i], y_score[:, i]) # Compute the curve (get false positive rate and true positive rates)
            roc_auc[i] = auc(fpr[i], tpr[i]) # Compute the area under the curve (x-axis is fpr, y-axis is tpr)

        fpr["micro"], tpr["micro"], _ = roc_curve(y_test.ravel(), y_score.ravel())
        roc_auc["micro"] = auc(fpr["micro"], tpr["micro"])

        ##############################################################################
        # Plot of a ROC curve for a specific class
        plt.figure()
        lw = 2
        plt.plot(fpr[2], tpr[2], color='darkorange',
                lw=lw, label='ROC curve (area = %0.2f)' % roc_auc[2])
        plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
        plt.xlim([0.0, 1.0])
        plt.ylim([0.0, 1.05])
        plt.xlabel('False Positive Rate')
        plt.ylabel('True Positive Rate')
        plt.title('Receiver operating characteristic example')
        plt.legend(loc="lower right")
        plt.show()

        ##############################################################################
        # Plot ROC curves for the multiclass problem

        # Compute macro-average ROC curve and ROC area

        # First aggregate all false positive rates
        all_fpr = np.unique(np.concatenate([fpr[i] for i in range(n_classes)]))

        # Then interpolate all ROC curves at this points
        mean_tpr = np.zeros_like(all_fpr)
        for i in range(n_classes):
            mean_tpr += interp(all_fpr, fpr[i], tpr[i]) # Guess y values given fpr (x-values) and tpr(y-values)

        # Finally average it and compute AUC
        mean_tpr /= n_classes

        fpr["macro"] = all_fpr
        tpr["macro"] = mean_tpr
        roc_auc["macro"] = auc(fpr["macro"], tpr["macro"])

        # Plot all ROC curves
        plt.figure()
        plt.plot(fpr["micro"], tpr["micro"],
                label='micro-average ROC curve (area = {0:0.2f})'
                    ''.format(roc_auc["micro"]),
                color='deeppink', linestyle=':', linewidth=4)

        plt.plot(fpr["macro"], tpr["macro"],
                label='macro-average ROC curve (area = {0:0.2f})'
                    ''.format(roc_auc["macro"]),
                color='navy', linestyle=':', linewidth=4)

        colors = cycle(['aqua', 'darkorange', 'cornflowerblue'])
        for i, color in zip(range(n_classes), colors):
            plt.plot(fpr[i], tpr[i], color=color, lw=lw,
                    label='ROC curve of class {0} (area = {1:0.2f})'
                    ''.format(i, roc_auc[i]))

        plt.plot([0, 1], [0, 1], 'k--', lw=lw)
        plt.xlim([0.0, 1.0])
        plt.ylim([0.0, 1.05])
        plt.xlabel('False Positive Rate')
        plt.ylabel('True Positive Rate')
        plt.title('Reciever Operating Characteristic')
        plt.legend(loc="lower right")
        plt.savefig(options.plots_folder + 'ROC_test{:.2f}%_{:.2f}k_obfuscation.png'.format(test_percentage, k))

        plt.show()
        return roc_auc["micro"], roc_auc["macro"]

    def sgd(self):
        """
        Perform stochastic graident descent
        """
        for i, j, r in self.samples:
            # Computer prediction and error
            prediction = self.get_rating(i, j)
            e = (r - prediction)

            # Update biases
            self.b_u[i] += self.alpha * (e - self.beta * self.b_u[i])
            self.b_i[j] += self.alpha * (e - self.beta * self.b_i[j])

            # Update user and item latent feature matrices
            self.P[i, :] += self.alpha * (e * self.Q[j, :] - self.beta * self.P[i,:])
            self.Q[j, :] += self.alpha * (e * self.P[i, :] - self.beta * self.Q[j,:])

    def get_rating(self, i, j):
        """
        Get the predicted rating of user i and item j
        """
        prediction = self.b + self.b_u[i] + self.b_i[j] + self.P[i, :].dot(self.Q[j, :].T)
        return prediction

    def full_matrix(self):
        """
        Computer the full matrix using the resultant biases, P and Q
        """
        return self.b + self.b_u[:,np.newaxis] + self.b_i[np.newaxis:,] + self.P.dot(self.Q.T)
    
    def save(self, folder_location):
        np.save(folder_location+"/b.npy", self.b)    # .npy extension is added if not given
        np.save(folder_location+"/b_u.npy", self.b_u)
        np.save(folder_location+"/b_i.npy", self.b_i)  
        np.save(folder_location+"/P.npy", self.P)  
        np.save(folder_location+"/Q.npy", self.Q)
         
    def load(self, folder_location):
        self.b = np.load(folder_location+"/b.npy")
        self.b_u = np.load(folder_location+"/b_u.npy")
        self.b_i = np.load(folder_location+"/b_i.npy")
        self.P = np.load(folder_location+"/P.npy")
        self.Q = np.load(folder_location+"/Q.npy")





